name: CI/CD Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  DOCKER_HUB_USERNAME: rahulkaswa
  APP_IMAGE_NAME: hackathonapp
  PROPHET_IMAGE_NAME: prophet-predictor

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Login to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ env.DOCKER_HUB_USERNAME }}
        password: ${{ secrets.DOCKER_HUB_PASSWORD }}
        
    - name: Extract metadata for app image
      id: meta-app
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.DOCKER_HUB_USERNAME }}/${{ env.APP_IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}
          
    - name: Extract metadata for prophet image
      id: meta-prophet
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.DOCKER_HUB_USERNAME }}/${{ env.PROPHET_IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}
          
    - name: Build and push app image
      uses: docker/build-push-action@v5
      with:
        context: ./app
        file: ./app/Dockerfile
        push: true
        tags: ${{ steps.meta-app.outputs.tags }}
        labels: ${{ steps.meta-app.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        
    - name: Build and push prophet-predictor image
      uses: docker/build-push-action@v5
      with:
        context: ./prophet-predictor
        file: ./prophet-predictor/Dockerfile
        push: true
        tags: ${{ steps.meta-prophet.outputs.tags }}
        labels: ${{ steps.meta-prophet.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  security-scan:
    runs-on: ubuntu-latest
    needs: build-and-push
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
    - name: Run Trivy vulnerability scanner for app
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: '${{ env.DOCKER_HUB_USERNAME }}/${{ env.APP_IMAGE_NAME }}:latest'
        format: 'sarif'
        output: 'trivy-app-results.sarif'
        
    - name: Run Trivy vulnerability scanner for prophet
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: '${{ env.DOCKER_HUB_USERNAME }}/${{ env.PROPHET_IMAGE_NAME }}:latest'
        format: 'sarif'
        output: 'trivy-prophet-results.sarif'
        
    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: '.'

  notify:
    runs-on: ubuntu-latest
    needs: [build-and-push]
    if: always()
    
    steps:
    - name: Notify deployment status
      run: |
        if [ "${{ needs.build-and-push.result }}" == "success" ]; then
          echo "‚úÖ Docker images built and pushed successfully!"
          echo "üîó App Image: ${{ env.DOCKER_HUB_USERNAME }}/${{ env.APP_IMAGE_NAME }}:latest"
          echo "üîó Prophet Image: ${{ env.DOCKER_HUB_USERNAME }}/${{ env.PROPHET_IMAGE_NAME }}:latest"
        else
          echo "‚ùå Build failed!"
          exit 1
        fi